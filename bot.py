import asyncio
import logging
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardMarkup –∏ InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from binance_data import fetch_all_metrics # –£–±–µ–¥–∏—Å—å, —á—Ç–æ fetch_all_metrics —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É

import google.generativeai as genai

# üîê –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7244165248:AAG4HAz9lm5y4zkfYjmGn4zmeYp6P_duFrE'

# üîë –£–∫–∞–∂–∏ —Å–≤–æ–π API –∫–ª—é—á Gemini
GOOGLE_API_KEY = "AIzaSyAOoQAVUe1Ytfu_DRDB_Z6PxqtRrsXtPu0" # <--- –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GOOGLE_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Gemini
model = genai.GenerativeModel('models/gemini-2.5-pro')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = 'ai_advice_history.json'
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: [{timestamp: ..., coin: ..., metrics: ..., advice: ...}, ...]}
ai_advice_history = {}

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–°–¢–û–†–ò–ï–ô ---

def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global ai_advice_history
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            ai_advice_history = json.load(f)
            logging.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {HISTORY_FILE}")
    except FileNotFoundError:
        logging.warning(f"–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
        ai_advice_history = {}
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ {HISTORY_FILE}. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
        ai_advice_history = {} # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—à–∏–±–æ–∫

def save_history():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(ai_advice_history, f, ensure_ascii=False, indent=4)
            logging.info(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {HISTORY_FILE}")
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ {HISTORY_FILE}: {e}")

# --- –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—É", callback_data="choose_coin")],
        [InlineKeyboardButton(text="üß† –ò–ò —Å–æ–≤–µ—Ç", callback_data="generate_idea")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤", callback_data="show_history")]
    ])
    return builder

# üìç –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã
def coin_menu():
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="BTC", callback_data="coin_BTC"),
         InlineKeyboardButton(text="ETH", callback_data="coin_ETH"),
         InlineKeyboardButton(text="SOL", callback_data="coin_SOL")],
        [InlineKeyboardButton(text="BNB", callback_data="coin_BNB"),
         InlineKeyboardButton(text="XRP", callback_data="coin_XRP"),
         InlineKeyboardButton(text="DOGE", callback_data="coin_DOGE")],
        [InlineKeyboardButton(text="ADA", callback_data="coin_ADA"),
         InlineKeyboardButton(text="LINK", callback_data="coin_LINK"),
         InlineKeyboardButton(text="DOT", callback_data="coin_DOT")],
        [InlineKeyboardButton(text="AVAX", callback_data="coin_AVAX"),
         InlineKeyboardButton(text="SHIB", callback_data="coin_SHIB")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ])
    return keyboard

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—É—é –∏–¥–µ—é.",
        reply_markup=main_menu()
    )

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≤–µ—Ç–æ–≤
@dp.callback_query(F.data == "show_history")
async def show_history_callback(call: CallbackQuery):
    user_id = str(call.from_user.id)
    history_for_user = ai_advice_history.get(user_id)

    if not history_for_user:
        await call.message.edit_text("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return

    history_text = "üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤:</b>\n\n"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_index = max(0, len(history_for_user) - 5)
    for i, entry in enumerate(history_for_user[start_index:], 1):
        history_text += (
            f"--- –°–æ–≤–µ—Ç #{i} ---\n"
            f"üìÖ –î–∞—Ç–∞: {entry['timestamp']}\n"
            f"üí∞ –ú–æ–Ω–µ—Ç–∞: {entry['coin']}\n"
            f"üß† –°–æ–≤–µ—Ç:\n{entry['advice']}\n\n"
        )

    if len(history_for_user) > 5:
        history_text += f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑ {len(history_for_user)} —Å–æ–≤–µ—Ç–æ–≤.\n"

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–≤–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏—é
    if len(history_text) > 4000:
        await call.message.edit_text("üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–≤–µ—Ç–æ–≤:</b> (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –ø–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å)\n", reply_markup=main_menu())
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for chunk in [history_text[i:i+4000] for i in range(0, len(history_text), 4000)][1:]: # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —á–∞–Ω–∫–∞
            await call.message.answer(chunk)
    else:
        await call.message.edit_text(history_text, reply_markup=main_menu())


# --- –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–í–ï–¢–ê –ò–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢) ---
async def generate_ai_advice(coin: str, metrics: dict) -> str:
    for key, value in metrics.items():
        if value is None:
            metrics[key] = 0.0

    prompt = (
        f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö. "
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ {coin} –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ô —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–æ–µ–º–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏, –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è 15 –º–∏–Ω—É—Ç–Ω—ã–µ. "
        "–¢–≤–æ–π —Å–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        "1. **–¢–∏–ø —Å–¥–µ–ª–∫–∏:** (–ù–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∫—É–ø–∫–∞', '–ü—Ä–æ–¥–∞–∂–∞', '–£–¥–µ—Ä–∂–∞–Ω–∏–µ').\n"
        "2. **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞:** (–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ, –Ω–æ —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏–∫–∏).\n"
        "3. **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –°—Ç–æ–ø-–õ–æ—Å—Å (SL):** (–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤).\n"
        "4. **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç (TP):** (–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏).\n"
        "–ü–æ—è—Å–Ω–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ:\n\n"
        "**–¢–∏–ø —Å–¥–µ–ª–∫–∏:** –ü–æ–∫—É–ø–∫–∞\n"
        "**–í—Ö–æ–¥:** [–∑–Ω–∞—á–µ–Ω–∏–µ] USDT\n"
        "**SL:** [–∑–Ω–∞—á–µ–Ω–∏–µ] USDT\n"
        "**TP:** [–∑–Ω–∞—á–µ–Ω–∏–µ] USDT\n"
        "**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** [–¢–≤–æ–π –∞–Ω–∞–ª–∏–∑]\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {coin}:\n"
        f"- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {metrics['current_price']:.2f} USDT\n"
        f"- –û—Ç–∫—Ä—ã—Ç—ã–π –ò–Ω—Ç–µ—Ä–µ—Å (Open Interest): {metrics['open_interest']:.2f}\n"
        f"- –°—Ç–∞–≤–∫–∞ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (Funding Rate): {metrics['funding_rate']:.5f}\n"
        f"- –û–±—ä–µ–º –ü–æ–∫—É–ø–æ–∫ (Taker Long Vol): {metrics['taker_buy_volume']:.2f}\n"
        f"- –û–±—ä–µ–º –ü—Ä–æ–¥–∞–∂ (Taker Short Vol): {metrics['taker_sell_volume']:.2f}\n"
        f"- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –õ–æ–Ω–≥/–®–æ—Ä—Ç: {metrics['long_short_ratio']:.2f}\n"
        f"- –ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏: {metrics['fear_greed_index_value']:.0f} ({metrics['fear_greed_index_grade']})\n"
    )
    try:
        response = await model.generate_content_async(prompt)
        if response.text:
            return response.text
        else:
            return "–ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

# üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback(call: CallbackQuery):
    data = call.data
    user_id = str(call.from_user.id)

    if data == "choose_coin":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=coin_menu())

    elif data.startswith("coin_"):
        coin = data.split("_")[1]
        user_state[user_id] = {"coin": coin}
        await call.message.edit_text(f"‚úÖ –ú–æ–Ω–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {coin}", reply_markup=main_menu())

    elif data == "back":
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif data == "generate_idea":
        coin = user_state.get(user_id, {}).get("coin")
        if not coin:
            await call.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É.")
            return

        await call.message.answer(f"‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ {coin} –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –ò–ò...")

        metrics = await fetch_all_metrics(coin)
        if not metrics:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            return

        advice = await generate_ai_advice(coin, metrics)

        text = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–Ω–µ—Ç–µ: {coin}</b>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {metrics['current_price']:.2f} USDT\n"
            f"üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–π –ò–Ω—Ç–µ—Ä–µ—Å (OI):</b> {metrics['open_interest']:.2f}\n"
            f"üí∏ <b>–°—Ç–∞–≤–∫–∞ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (Funding Rate):</b> {metrics['funding_rate']:.5f}\n"
            f"üü¢ <b>–û–±—ä–µ–º –ü–æ–∫—É–ø–æ–∫ (Taker Long Vol):</b> {metrics['taker_buy_volume']:.2f}\n"
            f"üî¥ <b>–û–±—ä–µ–º –ü—Ä–æ–¥–∞–∂ (Taker Short Vol):</b> {metrics['taker_sell_volume']:.2f}\n"
            f"‚öñÔ∏è <b>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –õ–æ–Ω–≥/–®–æ—Ä—Ç:</b> {metrics['long_short_ratio']:.2f}\n"
            f"üò± <b>–ò–Ω–¥–µ–∫—Å –°—Ç—Ä–∞—Ö–∞ –∏ –ñ–∞–¥–Ω–æ—Å—Ç–∏:</b> {metrics['fear_greed_index_value']:.0f} ({metrics['fear_greed_index_grade']})\n"
            f"\nüß† <b>–°–æ–≤–µ—Ç –ò–ò:</b>\n{advice}\n\n"
            "<i>(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò, –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç. –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏.)</i>"
        )

        await call.message.answer(text, reply_markup=main_menu())

        if user_id not in ai_advice_history:
            ai_advice_history[user_id] = []

        ai_advice_history[user_id].append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "coin": coin,
            "advice": advice
        })
        save_history() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    load_history()

    try:
        await dp.start_polling(bot)
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
        # –≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞, —á—Ç–æ —è –¥–æ–±–∞–≤–∏–ª –≤—ã—à–µ.
        pass

if __name__ == "__main__":
    asyncio.run(main())
